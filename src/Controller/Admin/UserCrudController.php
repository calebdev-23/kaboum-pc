<?php

namespace App\Controller\Admin;

use App\Entity\User;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\QueryBuilder;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FieldCollection;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FilterCollection;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Dto\SearchDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\ChoiceField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Security\Core\User\UserInterface;

class UserCrudController extends AbstractCrudController
{
    private $hasher;
    private $manager;

    public function __construct(UserPasswordHasherInterface $hasher, EntityManagerInterface $manager)
    {
        $this->hasher = $hasher;
        $this->manager = $manager;

    }

    public static function getEntityFqcn(): string
    {
        return User::class;
    }

    public function configureFields(string $pageName): iterable
    {
        return [
            TextField::new('name', 'Nom')
            ->hideOnIndex()
            ->hideOnDetail(),
            TextField::new('firstname', 'PrÃ©nom')
                ->hideOnIndex()
                ->hideOnDetail(),
            TextField::new('email'),
            TextField::new('fullName', 'Nom complet')
            ->hideOnForm(),
            ImageField::new('illustration')
            ->setBasePath('/Photo_profi/')
            ->setUploadDir('public/Photo_profi/'),
            TextField::new('password', 'Mot de passe')
            ->hideOnIndex()
            ->hideOnDetail()
            ->setFormType(PasswordType::class),

            ChoiceField::new('roles', 'Role')
                ->allowMultipleChoices()
                ->setChoices([
                'Administrateur'=> 'ROLE_ADMIN',
                'Utilisateur'=> 'ROLE_AUTHOR'
            ])
            ->renderAsBadges([
                'ROLE_ADMIN'=>'success'
            ])
        ];
    }
    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setPageTitle('index', 'Utilisateur')
            ->setPageTitle('new', 'Ajouter un nouveau utilisateur')
            ->setPageTitle('edit', 'Modification');
    }
    public function configureActions(Actions $actions): Actions
    {
        return parent::configureActions($actions)
            ->remove(Crud::PAGE_INDEX, Action::NEW)
            ;
    }
    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {

        $pass = $entityInstance->getPassword();
        $password = $this->hasher->hashPassword($entityInstance, $pass);
        $entityInstance->setPassword($password);


        parent::persistEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }
    public function createIndexQueryBuilder(SearchDto $searchDto, EntityDto $entityDto, FieldCollection $fields, FilterCollection $filters): QueryBuilder
    {
        if( $this->isGranted('ROLE_ADMIN'))
        {
            return parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters)
                ->getEntityManager()
                ->getRepository(User::class)
                ->createQueryBuilder('u')
                ->where('u.id != :user')
                ->setParameter('user', $this->getUser()->getId())
                ;
        }
        if( $this->isGranted('ROLE_USER'))
        {
            return parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters)
                ->getEntityManager()
                ->getRepository(User::class)
                ->createQueryBuilder('u')
                ->where('u.id = :user')
                ->setParameter('user', $this->getUser()->getId())
                ;
        }
        return parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters);
    }

}
